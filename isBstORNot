//Java implementation to check if given Binary tree 
//is a BST or not 

/* Class containing left and right child of current 
node and key value*/
class Node 
{ 
	int data; 
	Node left, right; 

	public Node(int item) 
	{ 
		data = item; 
		left = right = null; 
	} 
} 

public class BinaryTree 
{ 
	//Root of the Binary Tree 
	Node root; 
	
	
	 boolean isBst(){
	    return bstUtils(root,Integer.MIN_VALUE,Integer.MAX_VALUE);
	}
	
   public  boolean bstUtils(Node node, int min, int max){
	    
	    
	   if(node == null)
	        return true;
	         
	   if(node.data <min || node.data > max)
	            return false;
	            
	   return bstUtils(node.left ,min , node.data-1) && bstUtils(node.right ,node.data+1, max );
	    
	}
	

	public static void main(String args[]) 
	{ 
	    BinaryTree bt = new BinaryTree();
	    bt.root = new Node(5);
	    bt.root.left = new Node(2);
	    
		bt.root.right = new Node(10);
		bt.root.left.left = new Node(1);
		bt.root.right.right = new Node(11);
		  
		  if(bt.isBst())
		    System.out.println("is Bst");
		  else
		    System.out.println("is not Bst");
	} 
} 
